//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Surcharge
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InteractiveTaxOfficeEntities1 : DbContext
    {
        public InteractiveTaxOfficeEntities1()
            : base("name=InteractiveTaxOfficeEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Citizen> Citizens { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Ministry> Ministries { get; set; }
        public virtual DbSet<PaymentDetail> PaymentDetails { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Tax> Taxes { get; set; }
    
        public virtual int AddBalance(Nullable<decimal> balanceValue, Nullable<int> citizenID)
        {
            var balanceValueParameter = balanceValue.HasValue ?
                new ObjectParameter("BalanceValue", balanceValue) :
                new ObjectParameter("BalanceValue", typeof(decimal));
    
            var citizenIDParameter = citizenID.HasValue ?
                new ObjectParameter("CitizenID", citizenID) :
                new ObjectParameter("CitizenID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBalance", balanceValueParameter, citizenIDParameter);
        }
    
        public virtual int CitizenAdd(string nameSurname, string citizenshipNo, string citizenOccupation, string citizenAdress, string citizenPhoneNo, string citizenMail, string citizenPassword)
        {
            var nameSurnameParameter = nameSurname != null ?
                new ObjectParameter("NameSurname", nameSurname) :
                new ObjectParameter("NameSurname", typeof(string));
    
            var citizenshipNoParameter = citizenshipNo != null ?
                new ObjectParameter("CitizenshipNo", citizenshipNo) :
                new ObjectParameter("CitizenshipNo", typeof(string));
    
            var citizenOccupationParameter = citizenOccupation != null ?
                new ObjectParameter("CitizenOccupation", citizenOccupation) :
                new ObjectParameter("CitizenOccupation", typeof(string));
    
            var citizenAdressParameter = citizenAdress != null ?
                new ObjectParameter("CitizenAdress", citizenAdress) :
                new ObjectParameter("CitizenAdress", typeof(string));
    
            var citizenPhoneNoParameter = citizenPhoneNo != null ?
                new ObjectParameter("CitizenPhoneNo", citizenPhoneNo) :
                new ObjectParameter("CitizenPhoneNo", typeof(string));
    
            var citizenMailParameter = citizenMail != null ?
                new ObjectParameter("CitizenMail", citizenMail) :
                new ObjectParameter("CitizenMail", typeof(string));
    
            var citizenPasswordParameter = citizenPassword != null ?
                new ObjectParameter("CitizenPassword", citizenPassword) :
                new ObjectParameter("CitizenPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CitizenAdd", nameSurnameParameter, citizenshipNoParameter, citizenOccupationParameter, citizenAdressParameter, citizenPhoneNoParameter, citizenMailParameter, citizenPasswordParameter);
        }
    
        public virtual ObjectResult<CitizenList_Result> CitizenList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CitizenList_Result>("CitizenList");
        }
    
        public virtual ObjectResult<LoginEmployee_Result> LoginEmployee(string employeeName, string employeePassword)
        {
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var employeePasswordParameter = employeePassword != null ?
                new ObjectParameter("EmployeePassword", employeePassword) :
                new ObjectParameter("EmployeePassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoginEmployee_Result>("LoginEmployee", employeeNameParameter, employeePasswordParameter);
        }
    
        public virtual int MinistriesAdd(string ministryName, string headOfDepartments, Nullable<int> employeeID)
        {
            var ministryNameParameter = ministryName != null ?
                new ObjectParameter("MinistryName", ministryName) :
                new ObjectParameter("MinistryName", typeof(string));
    
            var headOfDepartmentsParameter = headOfDepartments != null ?
                new ObjectParameter("HeadOfDepartments", headOfDepartments) :
                new ObjectParameter("HeadOfDepartments", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MinistriesAdd", ministryNameParameter, headOfDepartmentsParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<MinistriesList_Result> MinistriesList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MinistriesList_Result>("MinistriesList");
        }
    
        public virtual int PaymentDetailAdd(Nullable<decimal> taxAmount, Nullable<decimal> interest, Nullable<decimal> totalPayment, Nullable<int> citizenID, Nullable<int> taxID, Nullable<System.DateTime> paymentDate)
        {
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var interestParameter = interest.HasValue ?
                new ObjectParameter("Interest", interest) :
                new ObjectParameter("Interest", typeof(decimal));
    
            var totalPaymentParameter = totalPayment.HasValue ?
                new ObjectParameter("TotalPayment", totalPayment) :
                new ObjectParameter("TotalPayment", typeof(decimal));
    
            var citizenIDParameter = citizenID.HasValue ?
                new ObjectParameter("CitizenID", citizenID) :
                new ObjectParameter("CitizenID", typeof(int));
    
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PaymentDetailAdd", taxAmountParameter, interestParameter, totalPaymentParameter, citizenIDParameter, taxIDParameter, paymentDateParameter);
        }
    
        public virtual ObjectResult<PaymentDetailList_Result> PaymentDetailList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PaymentDetailList_Result>("PaymentDetailList");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int TaxAdd(string taxName, Nullable<int> ministryID)
        {
            var taxNameParameter = taxName != null ?
                new ObjectParameter("TaxName", taxName) :
                new ObjectParameter("TaxName", typeof(string));
    
            var ministryIDParameter = ministryID.HasValue ?
                new ObjectParameter("MinistryID", ministryID) :
                new ObjectParameter("MinistryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TaxAdd", taxNameParameter, ministryIDParameter);
        }
    
        public virtual ObjectResult<TaxList_Result> TaxList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TaxList_Result>("TaxList");
        }
    
        public virtual ObjectResult<totalDebt_Result> totalDebt(Nullable<int> citizenID)
        {
            var citizenIDParameter = citizenID.HasValue ?
                new ObjectParameter("CitizenID", citizenID) :
                new ObjectParameter("CitizenID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<totalDebt_Result>("totalDebt", citizenIDParameter);
        }
    
        public virtual int UpdateOrInsertPaymentDetail(Nullable<decimal> taxAmount, Nullable<decimal> interest, Nullable<decimal> totalPayment, Nullable<int> citizenID, Nullable<int> taxID, Nullable<System.DateTime> paymentDate)
        {
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var interestParameter = interest.HasValue ?
                new ObjectParameter("Interest", interest) :
                new ObjectParameter("Interest", typeof(decimal));
    
            var totalPaymentParameter = totalPayment.HasValue ?
                new ObjectParameter("TotalPayment", totalPayment) :
                new ObjectParameter("TotalPayment", typeof(decimal));
    
            var citizenIDParameter = citizenID.HasValue ?
                new ObjectParameter("CitizenID", citizenID) :
                new ObjectParameter("CitizenID", typeof(int));
    
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOrInsertPaymentDetail", taxAmountParameter, interestParameter, totalPaymentParameter, citizenIDParameter, taxIDParameter, paymentDateParameter);
        }
    
        public virtual int UpPaymentDetails(Nullable<int> paymentDetailID, Nullable<decimal> taxAmount, Nullable<decimal> interest, Nullable<decimal> totalPayment, Nullable<int> citizenID, Nullable<int> taxID, Nullable<System.DateTime> paymentDate)
        {
            var paymentDetailIDParameter = paymentDetailID.HasValue ?
                new ObjectParameter("PaymentDetailID", paymentDetailID) :
                new ObjectParameter("PaymentDetailID", typeof(int));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var interestParameter = interest.HasValue ?
                new ObjectParameter("Interest", interest) :
                new ObjectParameter("Interest", typeof(decimal));
    
            var totalPaymentParameter = totalPayment.HasValue ?
                new ObjectParameter("TotalPayment", totalPayment) :
                new ObjectParameter("TotalPayment", typeof(decimal));
    
            var citizenIDParameter = citizenID.HasValue ?
                new ObjectParameter("CitizenID", citizenID) :
                new ObjectParameter("CitizenID", typeof(int));
    
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpPaymentDetails", paymentDetailIDParameter, taxAmountParameter, interestParameter, totalPaymentParameter, citizenIDParameter, taxIDParameter, paymentDateParameter);
        }
    
        public virtual ObjectResult<AfterPayment_Result> AfterPayment(Nullable<int> citizenID)
        {
            var citizenIDParameter = citizenID.HasValue ?
                new ObjectParameter("CitizenID", citizenID) :
                new ObjectParameter("CitizenID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AfterPayment_Result>("AfterPayment", citizenIDParameter);
        }
    
        public virtual ObjectResult<string> RemainingDebt(Nullable<int> citizenID)
        {
            var citizenIDParameter = citizenID.HasValue ?
                new ObjectParameter("CitizenID", citizenID) :
                new ObjectParameter("CitizenID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("RemainingDebt", citizenIDParameter);
        }
    
        public virtual ObjectResult<RemDebt_Result> RemDebt(Nullable<int> citizenID)
        {
            var citizenIDParameter = citizenID.HasValue ?
                new ObjectParameter("CitizenID", citizenID) :
                new ObjectParameter("CitizenID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RemDebt_Result>("RemDebt", citizenIDParameter);
        }
    
        public virtual ObjectResult<RemDebtt_Result> RemDebtt(Nullable<int> citizenID)
        {
            var citizenIDParameter = citizenID.HasValue ?
                new ObjectParameter("CitizenID", citizenID) :
                new ObjectParameter("CitizenID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RemDebtt_Result>("RemDebtt", citizenIDParameter);
        }
    
        public virtual ObjectResult<RemDebbt_Result> RemDebbt(Nullable<int> citizenID)
        {
            var citizenIDParameter = citizenID.HasValue ?
                new ObjectParameter("CitizenID", citizenID) :
                new ObjectParameter("CitizenID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RemDebbt_Result>("RemDebbt", citizenIDParameter);
        }
    }
}
